{
	"info": {
		"_postman_id": "d836a525-245e-4a4a-9205-59d0e68799aa",
		"name": "Tanium Rest",
		"description": "# Postman Collection of Endpoints for Tanium Rest App on Splunk SOAR.\n\n- ### Prerequisite\n\nThe below mentioned are the required fields to use this collection. So, Set this all fields before run the request.\n\n| Variable Name | Description |\n| ------ | ------ |\n| username  | Tanium Rest instance username (in environment variables ) |\n| password  | Tanium Rest instance password (in environment variables ) |\n| base_url | Tanium Rest instance URL (in environment variables ) |\n\n\n\n\n\n\n> **_NOTE:_**  The body parameters for the requests have been mentioned in the above table. Please set them as per your requirements. Refer the documentation of individual requests.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "List saved Questions",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session",
						"value": "{{session}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v2/saved_questions",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"saved_questions"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Questions",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "session",
						"value": "{{session}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v2/questions",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"questions"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Process",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var group_name = pm.variables.get(\"group_name\")",
							"var sensor_name = pm.variables.get(\"sensor_name\")",
							"var base_url = pm.environment.get(\"base_url\")",
							"var session = pm.variables.get(\"session\")",
							"var expire_seconds = pm.variables.get(\"expire_seconds\")",
							"var id_url = \"/api/v2/questions\"",
							"if(group_name){",
							"    ",
							"        var groupurl = \"/api/v2/groups/by-name/\"",
							"        const req = {",
							"            url: base_url + groupurl + group_name,",
							"            method: \"get\",",
							"            header: {",
							"                'Content-Type': 'application/json',",
							"                'session': session,",
							"            }",
							"            ",
							"        }",
							"        pm.sendRequest(req, function (err, response) {",
							"            var response = response.json()",
							"            pm.collectionVariables.set(\"group_id\", response.data.id)",
							"        });",
							"    ",
							"        setTimeout(function () { ",
							"        const req2 = {",
							"            url: base_url + id_url,",
							"            method: \"post\",",
							"            body: JSON.stringify(",
							"                {",
							"                    \"expire_seconds\": expire_seconds,",
							"                    \"context_group\": {\"id\": pm.variables.get(\"group_id\")},",
							"                    \"selects\": [",
							"                        {",
							"                            \"sensor\": {",
							"                                \"name\": sensor_name",
							"                            }",
							"                        }",
							"                    ]",
							"                }",
							"            ),",
							"            header: {",
							"                'Content-Type': 'application/json',",
							"                'session': session,",
							"            }",
							"        ",
							"        }",
							"        pm.sendRequest(req2, function (err, response) {",
							"            var response2 = response.json()",
							"            pm.collectionVariables.set(\"id\", response2.data.id)",
							"        });",
							"        }, 2000);",
							"}",
							"else",
							"{",
							"    const req3 = {",
							"        url: base_url + id_url,",
							"        method: \"post\",",
							"        body: JSON.stringify(",
							"            {",
							"                \"expire_seconds\": expire_seconds,",
							"                \"selects\": [",
							"                    {",
							"                        \"sensor\": {",
							"                            \"name\": sensor_name",
							"                        }",
							"                    }",
							"                ]",
							"            }",
							"        ),",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            'session': session,",
							"        }",
							"        ",
							"    }",
							"    pm.sendRequest(req3, function (err, response) {",
							"        var response3 = response.json()",
							"        pm.collectionVariables.set(\"id\", response3.data.id)",
							"    });",
							"}",
							"setTimeout(function () { ",
							"}, 5000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "session",
						"value": "{{session}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v2/result_data/question/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"result_data",
						"question",
						"{{id}}"
					]
				},
				"description": "The variables and their example values for the action are mentioned below.\n\n| **Variable Name** | **Example Value** |\n| ------ | ------ |\n| group_name(optional) | centos-computers |\n| sensor_name  | CPU Details |\n| expire_seconds  | 600 |"
			},
			"response": []
		},
		{
			"name": "parse quesion",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "session",
						"value": "{{session}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"text\": \"{{parse_query_text}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v2/parse_question",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"parse_question"
					]
				},
				"description": "The variables and their example values for the action are mentioned below.\n\n| **Variable Name** | **Example Value** |\n| ------ | ------ |\n| parse_query_text  | Computer |"
			},
			"response": []
		},
		{
			"name": "get question results",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "session",
						"value": "{{session}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v2/result_data/question/{{qustion_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"result_data",
						"question",
						"{{qustion_id}}"
					]
				},
				"description": "The variables and their example values for the action are mentioned below.\n\n| **Variable Name** | **Example Value** |\n| ------ | ------ |\n| qustion_id  | 272799 |"
			},
			"response": []
		},
		{
			"name": "execute action/terminate process",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var group_name = pm.variables.get(\"group_name\")",
							"var base_url = pm.environment.get(\"base_url\")",
							"var session = pm.variables.get(\"session\")",
							"var expire_seconds = pm.variables.get(\"expire_seconds\")",
							"var id_url = \"/api/v2/questions\"",
							"var package_url = \"/api/v2/packages/by-name/\"",
							"var action_group_url = \"/api/v2/action_groups/by-name/\"",
							"var package_name = pm.collectionVariables.get(\"package_name\")",
							"var action_group = pm.collectionVariables.get(\"action_group\")",
							"var package_param_valid = pm.collectionVariables.get(\"package_param\")",
							"var package_param_list = []",
							"",
							"if(package_param_valid)",
							"{",
							"    var package_param  = JSON.parse(pm.collectionVariables.get(\"package_param\"))",
							"    Object.entries(package_param).forEach(([key, value]) => {",
							"        var temp_obj = {}",
							"        temp_obj[\"key\"] = key",
							"        temp_obj[\"value\"] = value",
							"        package_param_list.push(temp_obj)",
							"    });",
							"}",
							"",
							"const req2 = {",
							"            url: base_url + package_url + package_name,",
							"            method: \"get\",",
							"            header: {",
							"                'Content-Type': 'application/json',",
							"                'session': session,",
							"            }",
							"            ",
							"        }",
							"            pm.sendRequest(req2, function (err, response) {",
							"            var response = response.json()",
							"            pm.collectionVariables.set(\"package_id\", response.data.id)",
							"        });",
							"        ",
							"const req3 = {",
							"            url: base_url + action_group_url + action_group,",
							"            method: \"get\",",
							"            header: {",
							"                'Content-Type': 'application/json',",
							"                'session': session,",
							"            }",
							"            ",
							"        }",
							"            pm.sendRequest(req3, function (err, response) {",
							"            var response = response.json()",
							"            pm.collectionVariables.set(\"action_group_id\", response.data.id)",
							"        });",
							"",
							"if(group_name){",
							"    ",
							"        var groupurl = \"/api/v2/groups/by-name/\"",
							"        const req = {",
							"            url: base_url + groupurl + group_name,",
							"            method: \"get\",",
							"            header: {",
							"                'Content-Type': 'application/json',",
							"                'session': session,",
							"            }",
							"            ",
							"        }",
							"            pm.sendRequest(req, function (err, response) {",
							"            var response = response.json()",
							"            pm.collectionVariables.set(\"group_id\", response.data.id)",
							"        });",
							"    ",
							"    setTimeout(function () { ",
							"        ",
							"        var body = {",
							"            'target_group': {",
							"                'source_id': pm.collectionVariables.get(\"group_id\"),",
							"                'name': group_name",
							"                },",
							"            'action_group': {'id': pm.collectionVariables.get(\"action_group_id\")},",
							"            'package_spec': {",
							"                'source_id': pm.collectionVariables.get(\"package_id\")",
							"                },",
							"            'name': pm.collectionVariables.get(\"action_name\"),",
							"            \"expire_seconds\": expire_seconds,",
							"        }",
							"        if(package_param_valid)",
							"        {",
							"            body.package_spec.parameters = package_param_list",
							"        }",
							"        var body_str = JSON.stringify(body);",
							"        pm.collectionVariables.set('execute_action_body', body_str); ",
							"        ",
							"    }, 3000);",
							"",
							"    ",
							"",
							"}",
							"else{",
							"    setTimeout(function () { ",
							"        var body = {",
							"            'action_group': {'id': pm.collectionVariables.get(\"action_group_id\")},",
							"            'package_spec': {",
							"                'source_id': pm.collectionVariables.get(\"package_id\")",
							"                },",
							"            'name': pm.collectionVariables.get(\"action_name\"),",
							"            \"expire_seconds\": expire_seconds,",
							"        }",
							"        if(package_param_valid)",
							"        {",
							"            body.package_spec.parameters = package_param_list",
							"        }",
							"        var body_str = JSON.stringify(body);",
							"        pm.collectionVariables.set('execute_action_body', body_str); ",
							"    }, 3000);",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "session",
						"value": "{{session}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{execute_action_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v2/saved_actions",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"saved_actions"
					]
				},
				"description": "The variables and their example values for the action are mentioned below.\n\n| **Variable Name** | **Example Value** |\n| ------ | ------ |\n| group_name(optional)  | centos-computers |\n| package_name  | Live Response - Linux |\n| action_group  | Default |\n| action_name  | Splunk Live Response Test |\n| package_param(optional)  | {\"$1\":\"Standard_Collection\", \"$2\":\"SCP\"} |\n| expire_seconds  | 600 |"
			},
			"response": []
		},
		{
			"name": "run query saved question",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var base_url = pm.environment.get(\"base_url\")",
							"var saved_question_name = pm.collectionVariables.get(\"saved_question_name\")",
							"var session = pm.variables.get(\"session\")",
							"var saved_question_url = \"/api/v2/saved_questions/by-name/\"",
							"const req2 = {",
							"            url: base_url + saved_question_url + saved_question_name,",
							"            method: \"get\",",
							"            header: {",
							"                'Content-Type': 'application/json',",
							"                'session': session,",
							"            }",
							"            ",
							"        }",
							"            pm.sendRequest(req2, function (err, response) {",
							"            var response = response.json()",
							"            pm.collectionVariables.set(\"saved_question_id\", response.data.id)",
							"        });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "session",
						"value": "{{session}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v2/result_data/saved_question/{{saved_question_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"result_data",
						"saved_question",
						"{{saved_question_id}}"
					]
				},
				"description": "The variables and their example values for the action are mentioned below.\n\n| **Variable Name** | **Example Value** |\n| ------ | ------ |\n| saved_qustion_name  | Computer Name |"
			},
			"response": []
		},
		{
			"name": "run query not saved question",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var base_url = pm.environment.get(\"base_url\")",
							"var not_saved_question_name = pm.collectionVariables.get(\"not_saved_question_name\")",
							"var group_name = pm.variables.get(\"group_name\")",
							"var session = pm.variables.get(\"session\")",
							"var expire_seconds = pm.variables.get(\"expire_seconds\")",
							"var not_saved_question_url = \"/api/v2/questions\"",
							"var parse_question_url = \"/api/v2/parse_question\"",
							"",
							"setTimeout(function () { ",
							"const req2 = {",
							"            url: base_url + parse_question_url ,",
							"            method: \"post\",",
							"            body: JSON.stringify(",
							"                {",
							"                \"text\": not_saved_question_name",
							"            }",
							"            ),",
							"            header: {",
							"                'Content-Type': 'application/json',",
							"                'session': session,",
							"            }",
							"            ",
							"        }",
							"            pm.sendRequest(req2, function (err, response) {",
							"            var response = response.json()",
							"            pm.collectionVariables.set(\"not_saved_question_parse_data\", JSON.stringify(response.data[0]))",
							"        });",
							"}, 1500);",
							"if(group_name){",
							"        setTimeout(function () { ",
							"        var groupurl = \"/api/v2/groups/by-name/\"",
							"        const req = {",
							"            url: base_url + groupurl + group_name,",
							"            method: \"get\",",
							"            header: {",
							"                'Content-Type': 'application/json',",
							"                'session': session,",
							"            }",
							"            ",
							"        }",
							"            pm.sendRequest(req, function (err, response) {",
							"            var response = response.json()",
							"            pm.collectionVariables.set(\"group_id\", response.data.id)",
							"        });",
							"        }, 4000);",
							"        setTimeout(function () { ",
							"            var json_body = JSON.parse(pm.collectionVariables.get(\"not_saved_question_parse_data\"))",
							"            json_body.expire_seconds = expire_seconds",
							"            json_body.context_group = {\"id\": -1}",
							"            json_body.context_group.id = pm.collectionVariables.get(\"group_id\")",
							"            const req4 = {",
							"                    url: base_url + not_saved_question_url ,",
							"                    method: \"post\",",
							"                    body: JSON.stringify(json_body),",
							"                    header: {",
							"                        'Content-Type': 'application/json',",
							"                        'session': session,",
							"                    }",
							"                    ",
							"                }",
							"                    pm.sendRequest(req4, function (err, response) {",
							"                    var response = response.json()",
							"                    pm.collectionVariables.set(\"not_saved_question_id\", response.data.id)",
							"                });",
							"        }, 5500);",
							"    ",
							"",
							"}",
							"else{",
							"    setTimeout(function () { ",
							"        var json_body = JSON.parse(pm.collectionVariables.get(\"not_saved_question_parse_data\"))",
							"        json_body.expire_seconds = expire_seconds",
							"        const req3 = {",
							"                url: base_url + not_saved_question_url ,",
							"                method: \"post\",",
							"                body: JSON.stringify(json_body),",
							"                header: {",
							"                    'Content-Type': 'application/json',",
							"                    'session': session,",
							"                }",
							"                ",
							"            }",
							"                pm.sendRequest(req3, function (err, response) {",
							"                var response = response.json()",
							"                pm.collectionVariables.set(\"not_saved_question_id\", response.data.id)",
							"            });",
							"        }, 3000);",
							"        ",
							"}",
							"",
							"setTimeout(function () { },11000);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "session",
						"value": "{{session}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v2/result_data/question/{{not_saved_question_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v2",
						"result_data",
						"question",
						"{{not_saved_question_id}}"
					]
				},
				"description": "The variables and their example values for the action are mentioned below.\n\n| **Variable Name** | **Example Value** |\n| ------ | ------ |\n| group_name(optional)  | tanium-client-01 |\n| not_saved_question_name  | Computer |\n| expire_seconds  | 600 |"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var base_url = pm.environment.get(\"base_url\")",
					"var username = pm.environment.get(\"username\")",
					"var password = pm.environment.get(\"password\")",
					"var login_url = \"/api/v2/session/login\"",
					"console.log",
					"if(!(username && password))  throw new Error(\"Please set username and password in environment variables\")",
					"if(!base_url) throw new Error(\"Please set base_url varible from environment variables\")",
					"",
					"const req = {",
					"            url: base_url + login_url,",
					"            method: \"post\",",
					"            body: JSON.stringify(",
					"                {",
					"                    \"username\": username,",
					"                    \"password\": password,",
					"                    ",
					"                }",
					"            )",
					"            ",
					"        }",
					"        pm.sendRequest(req, function (err, response) {",
					"            var response = response.json()",
					"            pm.collectionVariables.set(\"session\", response.data.session)",
					"        });"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "session",
			"value": ""
		},
		{
			"key": "sensor_name",
			"value": ""
		},
		{
			"key": "expire_seconds",
			"value": ""
		},
		{
			"key": "group_name",
			"value": ""
		},
		{
			"key": "group_id",
			"value": ""
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "parse_query_text",
			"value": ""
		},
		{
			"key": "qustion_id",
			"value": ""
		},
		{
			"key": "package_name",
			"value": ""
		},
		{
			"key": "action_name",
			"value": ""
		},
		{
			"key": "action_group",
			"value": ""
		},
		{
			"key": "action_group_id",
			"value": ""
		},
		{
			"key": "package_id",
			"value": ""
		},
		{
			"key": "package_param",
			"value": ""
		},
		{
			"key": "execute_action_body",
			"value": ""
		},
		{
			"key": "saved_question_id",
			"value": ""
		},
		{
			"key": "saved_question_name",
			"value": ""
		},
		{
			"key": "not_saved_question_id",
			"value": ""
		},
		{
			"key": "not_saved_question_name",
			"value": ""
		},
		{
			"key": "not_saved_question_parse_data",
			"value": ""
		}
	]
}